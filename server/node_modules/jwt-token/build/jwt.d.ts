import { RefreshToken, RefreshTokenOption } from './refresh-token';
import { JwtToken, CreateTokenOption, DecodeTokenOption, TokenOption } from './jwt-token';
export interface Tokens<T> {
    accessToken: JwtToken<T>;
    refreshToken: RefreshToken<T>;
}
export interface ResultOfGetRefreshToken {
    manuallyChangedAt: number;
    refreshToken: string;
}
export declare class Jwt {
    static getTokenOrCreateTokens<T>(payload: T, refreshTokenOption: RefreshTokenOption<T>, createAccessTokenOption: CreateTokenOption<T>, getRefreshToken: (payload: T) => Promise<string | undefined>, saveRefreshToken: (refreshToken: RefreshToken<T>) => Promise<void>, updateRefreshToken: (refreshToken: RefreshToken<T>) => Promise<void>): Promise<Tokens<T>>;
    static verifyAccessToken<T>(decodeAccessTokenOption: DecodeTokenOption, getManuallyChangedAt: (accessToken: JwtToken<T>) => Promise<number>): Promise<T>;
    static refresh<T>(refreshTokenString: string, refreshTokenOption: RefreshTokenOption<T>, accessTokenOption: TokenOption<T>, getRefreshToken: (refreshToken: RefreshToken<T>) => Promise<ResultOfGetRefreshToken | undefined>, updateRefreshToken: (refreshToken: RefreshToken<T>) => Promise<void>): Promise<Tokens<T>>;
}
